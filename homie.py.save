import speech_recognition as sr 
import os
import pyowm
from lxml import html
import requests
import time
from datetime import datetime
import glob
import random
import RPi.GPIO as GPIO

<<<<<<< HEAD
def cleanup():
	GPIO.cleanup()

def dont_move():
        GPIO.setmode(GPIO.BOARD)
	        GPIO.setup(7,GPIO.OUT)
        GPIO.setup(11,GPIO.OUT)
        GPIO.setup(13,GPIO.OUT)
        GPIO.setup(15,GPIO.OUT)
        GPIO.output(7,False)
        GPIO.output(11,False)
        GPIO.output(13,False)
        GPIO.output(15,False)

# how much to rotate
dont_move()
rotate_time = 0.5
min_move_front_distance = 10
move_forward_time = 0.33
=======
# times for various movements
rotate_time = 0.1
move_backward_time = 0.5
move_forward_time = 0.5
>>>>>>> d4409cc056b656e37a928ea9fa24b7d2d7b94d17

#settings
mic_name = "USB Device 0x46d:0x825: Audio (hw:1,0)"
sample_rate = 48000
chunk_size = 2048

r=sr.Recognizer()

mic_list = sr.Microphone.list_microphone_names()

for i,microphone_name in enumerate(mic_list):
	if microphone_name == mic_name:
		device_id=i
		print microphone_name
		print device_id

def input_speech():
	while True:
		print "trying to listen"
		with sr.Microphone(device_index=device_id, sample_rate = sample_rate, chunk_size=chunk_size) as source:
			r.adjust_for_ambient_noise(source)
			print "okay say something"
			audio=r.listen(source)
			# print "sup"
		try:
			text=r.recognize_google(audio)
			print text
			break
		except:
			os.system('./speech.sh ' + "could you please repeat that? I did not quite understand you.")

	#text = r.recognize_google(audio)
	return text

def weather():
	owm = pyowm.OWM('8e47cb932d1448c4049c3506aca77f87')
	os.system("./speech.sh " + "Which place?")
	place = input_speech()
	observation = owm.weather_at_place(place)
	w = observation.get_weather()
	complete_temp = w.get_temperature('celsius') 
	for i in complete_temp:
		if(i=="temp"):
			os.system('./speech.sh ' + "The temperature is " + str(complete_temp[i]) + " Degrees celsius ")

def news_for_today():
	response = requests.get('https://news.google.com/news/section?cf=all&pz=1&topic=b&siidp=b458d5455b7379bd8193a061024cd11baa97&ict=ln')
	if (response.status_code == 200):
		pagehtml = html.fromstring(response.text)
		news = pagehtml.xpath('//h2[@class="esc-lead-article-title"] \
		                      /a/span[@class="titletext"]/text()')
		for i in news:
			os.system('./speech.sh ' + i)



def current_time():
	d=str(datetime.now().time())
	d=d[:5]
	d=datetime.strptime(d, "%H:%M")
	d=d.strftime("%I:%M %p")
	os.system('./speech.sh ' + d)

def joke():
	L=["Yo momma is so fat, I took a picture of her last Christmas and it's still printing." , "Yo momma is so fat when she sat on WalMart, she lowered the prices", "Yo momma is so stupid when an intruder broke into her house, she ran downstairs, dialed 9-1-1 on the microwave, and couldn't find the call", "Yo mama so bald that she took a shower and got brain-washed", "Yo mama is so fat that she looked up cheat codes for Wii Fit", "Yo mama so old that when she was in school there was no history class", "Yo momma so fat she Fell in love and broke it." , "Yo mama so fat she's got more Chins than a Hong Kong phone book!", "I can't believe I got fired from the calendar factory. All I did was take a day off.", "Why did the scientist install a knocker on his door? He wanted to win the No-bell prize!"]
	i=random.randrange(0,len(L))
	os.system('./speech.sh ' + L[i])

def trackObject(imgname, matchthresh):
	import numpy as np
	import cv2
	listOfMatches = []
	ESC=27   
	camera = cv2.VideoCapture(0)
	#orb = cv2.ORB()
	orb = cv2.ORB_create()
	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)

	imgTrainColor=cv2.imread(imgname)
	imgTrainGray = cv2.cvtColor(imgTrainColor, cv2.COLOR_BGR2GRAY)

	kpTrain = orb.detect(imgTrainGray,None)
	kpTrain, desTrain = orb.compute(imgTrainGray, kpTrain)

	firsttime=True
	counter = 0
	while True:
		ret, imgCamColor = camera.read()
		imgCamGray = cv2.cvtColor(imgCamColor, cv2.COLOR_BGR2GRAY)
		kpCam = orb.detect(imgCamGray,None)
		kpCam, desCam = orb.compute(imgCamGray, kpCam)
		matches = bf.match(desCam,desTrain)
		dist = [m.distance for m in matches]
		try:
			thres_dist = (sum(dist) / len(dist)) * 0.5
		except:
			thres_dist = (sum(dist) *0.5)
		matches = [m for m in matches if m.distance < thres_dist]   

		if firsttime==True:
			h1, w1 = imgCamColor.shape[:2]
			h2, w2 = imgTrainColor.shape[:2]
			nWidth = w1+w2
			nHeight = max(h1, h2)
			hdif = (h1-h2)/2
			firsttime=False
		result = np.zeros((nHeight, nWidth, 3), np.uint8)
		# print np.size(result)
		result[hdif:hdif+h2, :w2] = imgTrainColor
		result[:h1, w2:w1+w2] = imgCamColor

		for i in range(len(matches)):
			pt_a=(int(kpTrain[matches[i].trainIdx].pt[0]), int(kpTrain[matches[i].trainIdx].pt[1]+hdif))
			pt_b=(int(kpCam[matches[i].queryIdx].pt[0]+w2), int(kpCam[matches[i].queryIdx].pt[1]))
			cv2.line(result, pt_a, pt_b, (255, 0, 0))

		#cv2.imshow('Camara', result)
		
		key = cv2.waitKey(20)
		if key == ESC:
			break
		if len(matches) > matchthresh or counter > 60: # or wait 3 seconds
			if counter > 60:
				return False, listOfMatches
			cv2.destroyAllWindows()
			camera.release()
			return True, listOfMatches
		counter+=1
		listOfMatches.append(len(matches))
		#print len(matches)
	cv2.destroyAllWindows()
	camera.release()

def voiceInput(inputString):	
	listObj = {'bottle':9, 'book':11, 'cube':8, 'mug':5, 'perfume':6, 'mouse':6}
	flag = 0
	objectToFind = ""
	if "botal" in inputString or "portal" in inputString:
		objectToFind = "bottle"
	elif "buk" in inputString:
		objectToFind = "book"
	elif "cute" in inputString:
		objectToFind = "cube"
	elif "mum" in inputString or "cup" in inputString or "class" in inputString:
		objectToFind = "mug" 
	elif "deodorant" in inputString:
		objectToFind = "perfume"
	elif "house" in inputString or "maus" in inputString:
		objectToFind = "mouse"
	else:
		for i in listObj:
			if i in inputString:
				objectToFind = i
				objectThreshold = listObj[i]
				break
	if objectToFind != "":
		img_files=glob.glob('./database/'+objectToFind+'/*')
		flag = 0
		count = 0
		while True: 
			for i in img_files:
				print "[+] Trying image " + i
				ret, b = trackObject(i,objectThreshold)
				if ret == True:
					print "Found " + objectToFind
					move_down()
					time.sleep(move_backward_time)
					dont_move()
					try:
						os.system('./speech.sh ' + "found " + objectToFind) 
					except sr.UnknownValueError:
						print("[-] Error")
					except sr.RequestError as e:
						print "[-] Error"
					flag = 1
					cleanup()
					if flag == 1:
						exit(0)
					break
				else:
					for matches in b:
						if matches >= 2:
							count += 1
					print 'count is '+str(count)
					if count < 14:
						move_left()
						print 'moving left'
						time.sleep(rotate_time)
						dont_move()
							#voiceInput(objectToFind)
					elif count > 14 and findDistance > 14:
						move_up()
						print 'moving forward'
						time.sleep(move_forward_time)
						dont_move()
						#voiceInput(objectToFind)
					try:
						os.system('./speech.sh ' + "lol hogaya") 
					except sr.UnknownValueError:
						print("[-] Error")
					except sr.RequestError as e:
						print "[-] Error"	
			if(flag == 1):
				cleanup()
				break
	else:
		cleanup()
		try:
			os.system('./speech.sh ' + "Object not in Database") 
		except sr.UnknownValueError:
			print("[-] Error")
		except sr.RequestError as e:
			print "[-] Error"

def determine(ans):
	option1="news"
	option2="weather"
	option3="time"
	option4 ="find"
	option5="where"
	option6="joke"
	option7="move"
	
	if option1 in ans:
		news_for_today()
	elif option2 in ans:
		weather()
	elif option3 in ans:
		current_time()
	elif option4 in ans or option5 in ans:
		voiceInput(ans)
	elif option6 in ans:
		jokes()
	elif option6 in ans:
		move()

def findDistance():
	import time
	import curses
	import RPi.GPIO as GPIO
	GPIO.setmode(GPIO.BOARD)

	TRIG = 16
	ECHO = 18
	print ("[+] Distance Measurement in Progress")

	GPIO.setup(TRIG, GPIO.OUT)
	GPIO.setup(ECHO, GPIO.IN)

	GPIO.output(TRIG, False)
	print ("[+] Waiting for sensor to settle")
	time.sleep(0.5)

	GPIO.output(TRIG, True)
	time.sleep(0.00001)
	GPIO.output(TRIG, False)

	while GPIO.input(ECHO)==0:
		pulse_start = time.time()

	while GPIO.input(ECHO)==1:
		pulse_end = time.time()

	pulse_duration = pulse_end - pulse_start

	distance = pulse_duration * 17150

	ditance = round(distance, 2)

	print ("Distance:", distance, "cm") # The final distance
	GPIO.cleanup()
	return distance

def move_left():
	GPIO.setmode(GPIO.BOARD)
	GPIO.setup(7,GPIO.OUT)	
	GPIO.setup(11,GPIO.OUT)
	GPIO.setup(13,GPIO.OUT)
	GPIO.setup(15,GPIO.OUT)
	GPIO.output(7,True)
	GPIO.output(11,False)
	GPIO.output(13,True)
	GPIO.output(15,False)

def move_right():
	GPIO.setmode(GPIO.BOARD)
	GPIO.setup(7,GPIO.OUT)	
	GPIO.setup(11,GPIO.OUT)
	GPIO.setup(13,GPIO.OUT)
	GPIO.setup(15,GPIO.OUT)						
	GPIO.output(7,False)
	GPIO.output(11,True)
	GPIO.output(13,False)
	GPIO.output(15,True)

def move_up():
	GPIO.setmode(GPIO.BOARD)
	GPIO.setup(7,GPIO.OUT)	
	GPIO.setup(11,GPIO.OUT)
	GPIO.setup(13,GPIO.OUT)
	GPIO.setup(15,GPIO.OUT)
	GPIO.output(7,True)
	GPIO.output(11,False)
	GPIO.output(13,False)
	GPIO.output(15,True)

def move_down():
	GPIO.setmode(GPIO.BOARD)
	GPIO.setup(7,GPIO.OUT)	
	GPIO.setup(11,GPIO.OUT)
	GPIO.setup(13,GPIO.OUT)
	GPIO.setup(15,GPIO.OUT)
	GPIO.output(7,False)
	GPIO.output(11,True)
	GPIO.output(13,True)
	GPIO.output(15,False)

def dont_move():
	GPIO.setmode(GPIO.BOARD)
	GPIO.setup(7,GPIO.OUT)	
	GPIO.setup(11,GPIO.OUT)
	GPIO.setup(13,GPIO.OUT)
	GPIO.setup(15,GPIO.OUT)
	GPIO.output(7,False)
	GPIO.output(11,False)
	GPIO.output(13,False)
	GPIO.output(15,False)

if __name__ == "__main__":
	os.system("./speech.sh " + "Hey there! Whats up? ")
	print "hello"
	ans = input_speech()
	print ans
	determine(ans.lower())


